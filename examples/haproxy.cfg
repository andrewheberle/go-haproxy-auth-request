global
	# modern SSL configuration
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets
	ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets

	crt-base /usr/local/etc/haproxy

	log stdout format raw daemon

resolvers dns
	parse-resolv-conf

defaults
	log global
	timeout client 30s
	timeout server 30s
	timeout connect 2s
	default-server init-addr last,libc,none check resolvers dns

frontend http
	bind :8080
	bind :8443 ssl crt auth.pem alpn h2,http/1.1
	mode http
	
	option httplog
	option dontlognull

	http-request redirect scheme https if ! { ssl_fc }

	use_backend be_authelia if { hdr(host) "auth.example.com" }
	use_backend be_protected if { hdr(host) "app.example.com" }
	
	default_backend be_drop

backend be_drop
	mode http

	http-request silent-drop

backend be_spoe
	timeout connect 5s
	timeout server  5m

	server spoa spoa:3000 check

backend be_authelia
	mode http

	server authelia authelia:9091 check

backend be_protected
	mode http

	# set vars for later
	http-request set-var(req.scheme) str(https) if { ssl_fc }
	http-request set-var(req.scheme) str(http) if ! { ssl_fc }
	http-request set-var(req.questionmark) str(?) if { query -m found }

	# set required headers
	http-request set-header X-Real-IP %[src]
	http-request set-header X-Forwarded-Proto %[var(req.scheme)]
	http-request set-header X-Forwarded-Host %[req.hdr(Host)]
	http-request set-header X-Forwarded-Uri %[path]%[var(req.questionmark)]%[query]

	# set optional header for method
	http-request set-var(req.method) str(CONNECT) if { method CONNECT }
	http-request set-var(req.method) str(GET) if { method GET }
	http-request set-var(req.method) str(HEAD) if { method HEAD }
	http-request set-var(req.method) str(OPTIONS) if { method OPTIONS }
	http-request set-var(req.method) str(POST) if { method POST }
	http-request set-var(req.method) str(TRACE) if { method TRACE }
	http-request set-var(req.method) str(PUT) if { method PUT }
	http-request set-var(req.method) str(PATCH) if { method PATCH }
	http-request set-var(req.method) str(DELETE) if { method DELETE }
	http-request set-header X-Forwarded-Method %[var(req.method)]

	# set up spoe filter
	filter spoe engine auth-request config /usr/local/etc/haproxy/spoe.cfg

	# acls for later
	acl auth_successful var(txn.auth_request.response_successful) -m bool
	acl auth_redirect var(txn.auth_request.response_redirect) -m bool

	# send to spoe and act on response
	http-request send-spoe-group auth-request auth-request-group
	http-request redirect location %[var(txn.auth_request.response_location)] if auth_redirect ! auth_successful
	http-request deny if ! auth_successful

	# Return some content for successful auth
	#
	# This would normally be your real service
	http-request return status 200 content-type text/plain lf-string "Auth OK\nName: %[var(txn.auth_request.response_remote_name)]\nUser: %[var(txn.auth_request.response_remote_user)]\nEmail: %[var(txn.auth_request.response_remote_email)]\nGroups: %[var(txn.auth_request.response_remote_groups)]\n"
